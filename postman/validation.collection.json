{
	"info": {
		"_postman_id": "ebea194a-da34-476b-a687-b865f709ed90",
		"name": "Model Validations",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26242746"
	},
	"item": [
		{
			"name": "course",
			"item": [
				{
					"name": "invalid",
					"item": [
						{
							"name": "spaces in name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create course with invalid spaces', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/courses\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"courseDTO.name\" && ",
											"        err.rejectedValue === \"              COURSE         \" && err.description === \"Course's name cannot contain spaces at the start and the end of the string\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"              COURSE         \",\n    \"description\": \"Formación para aprender a cocinar como auténticos caballeros de la época medieval.\",\n    \"students\": [],\n    \"teacher\": null,\n    \"school\": null,\n    \"code\": \"LNG2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/courses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "empty name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create course with empty name', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/courses\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"courseDTO.name\" && ",
											"        err.rejectedValue === \"\" && err.description === \"Course's name cannot be blank\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"\",\n    \"description\": \"Formación para aprender a cocinar como auténticos caballeros de la época medieval.\",\n    \"students\": [],\n    \"teacher\": null,\n    \"school\": null,\n    \"code\": \"LNG2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/courses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "numbers in name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create course with numbers in name', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/courses\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"courseDTO.name\" && ",
											"        err.rejectedValue === \"12387Course983420\" && err.description === \"Course's name cannot contain any numbers\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"12387Course983420\",\n    \"description\": \"Formación para aprender a cocinar como auténticos caballeros de la época medieval.\",\n    \"students\": [],\n    \"teacher\": null,\n    \"school\": null,\n    \"code\": \"LNG2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/courses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "special chars in name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create course with special chars in name', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/courses\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"courseDTO.name\" && ",
											"        err.rejectedValue === \"$$course$$\" && err.description === \"Course's name cannot contain special characters\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"$$course$$\",\n    \"description\": \"Formación para aprender a cocinar como auténticos caballeros de la época medieval.\",\n    \"students\": [],\n    \"teacher\": null,\n    \"school\": null,\n    \"code\": \"LNG2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/courses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid course code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create course with invalid course code', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/courses\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"courseDTO.code\" && ",
											"        err.rejectedValue === \"REALLY BAD CODE 982103\" && err.description === \"must match \\\"^[A-Z]{3}\\\\d$\\\"\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Curso Épico\",\n    \"description\": \"Formación para aprender a cocinar como auténticos caballeros de la época medieval.\",\n    \"students\": [],\n    \"teacher\": null,\n    \"school\": null,\n    \"code\": \"REALLY BAD CODE 982103\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/courses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "null description",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create course with null description', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/courses\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"courseDTO.description\" && ",
											"        err.rejectedValue === \"null\" && err.description === \"Course's description cannot be null\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Curso NO Épico\",\n    \"description\": null,\n    \"students\": [],\n    \"teacher\": null,\n    \"school\": null,\n    \"code\": \"LNG2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/courses",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"courses"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "schools",
			"item": [
				{
					"name": "invalid",
					"item": [
						{
							"name": "trim spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create school with spaces around name', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/schools\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"schoolDTO.name\" && ",
											"        err.rejectedValue === \"              SCHOOL         \" && err.description === \"School's name cannot contain any space character at the start or end of the string\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"              SCHOOL         \",\n    \"startDate\": \"2001-09-11T00:00:00Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/schools",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"schools"
									]
								}
							},
							"response": []
						},
						{
							"name": "numbers in name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create school with numbers in name', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/schools\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"schoolDTO.name\" && ",
											"        err.rejectedValue === \"12387Course983420\" && err.description === \"School's name cannot contain any number\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"12387Course983420\",\n    \"startDate\": \"2001-09-11T00:00:00Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/schools",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"schools"
									]
								}
							},
							"response": []
						},
						{
							"name": "special chars in name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create school with special chars in name', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/schools\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"schoolDTO.name\" && ",
											"        err.rejectedValue === \"$$school$$\" && err.description === \"School's name cannot contain any special characters\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"$$school$$\",\n    \"startDate\": \"2001-09-11T00:00:00Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/schools",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"schools"
									]
								}
							},
							"response": []
						},
						{
							"name": "null startDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create school with null start date', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/schools\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"schoolDTO.startDate\" && ",
											"        err.rejectedValue === \"null\" && err.description === \"School's start date cannot be null\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Colegio Monjas REPO\",\n    \"startDate\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/schools",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"schools"
									]
								}
							},
							"response": []
						},
						{
							"name": "future startDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create school with a future start date from now', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/schools\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"schoolDTO.startDate\" && ",
											"        err.rejectedValue === \"Thu Sep 11 01:00:00 BST 3000\" && err.description === \"School's start date cannot be from the future\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Colegio Monjas REPO\",\n    \"startDate\": \"3000-09-11T00:00:00Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/schools",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"schools"
									]
								}
							},
							"response": []
						},
						{
							"name": "over 200yo old startDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create school with start date over 200yo', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/schools\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"schoolDTO.startDate\" && ",
											"        err.rejectedValue === \"Wed Sep 11 00:00:00 GMT 1000\" && err.description === \"School's start date cannot be earlier from 200 years ago\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Colegio Monjas REPO\",\n    \"startDate\": \"1000-09-11T00:00:00Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/schools",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"schools"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "student",
			"item": [
				{
					"name": "invalid",
					"item": [
						{
							"name": "trim spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create student with invalid spaces', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/students\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"studentDTO.name\" && ",
											"        err.rejectedValue === \"   Niño    NPC   \" && err.description === \"Student's name cannot contain any space character at the end and the start of the string\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"   Niño    NPC   \",\n    \"address\": \"\",\n    \"age\": 7\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/students",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "numbers in name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create student with numbers in name', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/students\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"studentDTO.name\" && ",
											"        err.rejectedValue === \"NiñoNPC28139013\" && err.description === \"Student's name cannot contain any number\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"NiñoNPC28139013\",\n    \"address\": \"\",\n    \"age\": 7\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/students",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "special characters in name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create student with special characters in name', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/students\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"studentDTO.name\" && ",
											"        err.rejectedValue === \"N,i.ñoNPC$$$$\" && err.description === \"Student's name cannot contain any special character\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"N,i.ñoNPC$$$$\",\n    \"address\": \"\",\n    \"age\": 7\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/students",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "empty address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create student with empty address', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/students\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"studentDTO.address\" && ",
											"        err.rejectedValue === \"\" && err.description === \"Student's address cannot be blank\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"NiñoNPC\",\n    \"address\": \"\",\n    \"age\": 7\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/students",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "null address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create student with null address', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/students\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"studentDTO.address\" && ",
											"        err.rejectedValue === \"null\" && err.description === \"Student's address cannot be null\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"NiñoNPC\",\n    \"address\": null,\n    \"age\": 7\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/students",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "null age",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create student with null age', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/students\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"studentDTO.age\" && ",
											"        err.rejectedValue === \"null\" && err.description === \"Student's age cannot be null\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"NiñoNPC\",\n    \"address\": \"Casa loca\",\n    \"age\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/students",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "too young",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create student younger age', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/students\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"studentDTO.age\" && ",
											"        err.rejectedValue === \"2\" && err.description === \"Student's age must be greater or equal 3\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"NiñoNPC\",\n    \"address\": \"Casa loca\",\n    \"age\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/students",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"students"
									]
								}
							},
							"response": []
						},
						{
							"name": "too old",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create student with older age', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/students\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"studentDTO.age\" && ",
											"        err.rejectedValue === \"13\" && err.description === \"Student's age must be lower or equal 12\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"NiñoNPC\",\n    \"address\": \"Casa loca\",\n    \"age\": 13\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/students",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"students"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "teacher",
			"item": [
				{
					"name": "invalid",
					"item": [
						{
							"name": "trim spaces",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create teacher with invalid spaces', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"teacherDTO.name\" && ",
											"        err.rejectedValue === \"   Profe    NPC   \" && err.description === \"Teacher's name cannot contain separation characters around the content\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"   Profe    NPC   \",\n    \"lastname\": \"NPC\",\n    \"address\": \"Home\",\n    \"age\": 24,\n    \"phone\": \"683902131\",\n    \"email\": \"profe@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "numbers in name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create teacher with numbers in name', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"teacherDTO.name\" && ",
											"        err.rejectedValue === \"1Teacher2913821340\" && err.description === \"Teacher's name cannot contain any number\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"1Teacher2913821340\",\n    \"lastname\": \"NPC\",\n    \"address\": \"Home\",\n    \"age\": 24,\n    \"phone\": \"683902131\",\n    \"email\": \"profe@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "special characters in name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create teacher with special characters in name', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"teacherDTO.name\" && ",
											"        err.rejectedValue === \"T€ACH€RRR\" && err.description === \"Teacher's name cannot contain any special character\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"T€ACH€RRR\",\n    \"lastname\": \"NPC\",\n    \"address\": \"Home\",\n    \"age\": 24,\n    \"phone\": \"683902131\",\n    \"email\": \"profe@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "trim spaces in lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create teacher with invalid spaces', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"teacherDTO.lastname\" && ",
											"        err.rejectedValue === \" NP    C \" && err.description === \"Teacher's lastname cannot contain separation characters around the content\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Teacher\",\n    \"lastname\": \" NP    C \",\n    \"address\": \"Home\",\n    \"age\": 24,\n    \"phone\": \"683902131\",\n    \"email\": \"profe@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "numbers in lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create teacher with numbers in lastname', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"teacherDTO.lastname\" && ",
											"        err.rejectedValue === \"1283714\" && err.description === \"Teacher's lastname cannot contain any number\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Teacher\",\n    \"lastname\": \"1283714\",\n    \"address\": \"Home\",\n    \"age\": 24,\n    \"phone\": \"683902131\",\n    \"email\": \"profe@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "special characters in lastname",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create teacher with special characters in lastname', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"teacherDTO.lastname\" && ",
											"        err.rejectedValue === \"NPC$$$\" && err.description === \"Teacher's lastname cannot contain any special character\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Teacher\",\n    \"lastname\": \"NPC$$$\",\n    \"address\": \"Home\",\n    \"age\": 24,\n    \"phone\": \"683902131\",\n    \"email\": \"profe@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "empty address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create teacher with empty address', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"teacherDTO.address\" && ",
											"        err.rejectedValue === \"\" && err.description === \"Teacher's address cannot be blank\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Teacher\",\n    \"lastname\": \"NPC\",\n    \"address\": \"\",\n    \"age\": 24,\n    \"phone\": \"683902131\",\n    \"email\": \"profe@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "null address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create teacher with null address', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"teacherDTO.address\" && ",
											"        err.rejectedValue === \"null\" && err.description === \"Teacher's address cannot be null\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Teacher\",\n    \"lastname\": \"NPC\",\n    \"address\": null,\n    \"age\": 24,\n    \"phone\": \"683902131\",\n    \"email\": \"profe@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "null age",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create teacher with null age', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"teacherDTO.age\" && ",
											"        err.rejectedValue === \"null\" && err.description === \"Teacher's age cannot be null\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Teacher\",\n    \"lastname\": \"NPC\",\n    \"address\": \"Address\",\n    \"age\": null,\n    \"phone\": \"683902131\",\n    \"email\": \"profe@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "too young",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create teacher with younger age', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"teacherDTO.age\" && ",
											"        err.rejectedValue === \"16\" && err.description === \"Teacher's age must be greater or equal 23\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Teacher\",\n    \"lastname\": \"NPC\",\n    \"address\": \"Address\",\n    \"age\": 16,\n    \"phone\": \"683902131\",\n    \"email\": \"profe@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "too old",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create teacher with older age', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"teacherDTO.age\" && ",
											"        err.rejectedValue === \"80\" && err.description === \"Teacher's age must be lower or equal 73\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Teacher\",\n    \"lastname\": \"NPC\",\n    \"address\": \"Address\",\n    \"age\": 80,\n    \"phone\": \"683902131\",\n    \"email\": \"profe@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "null phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create teacher with null phone', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"teacherDTO.phone\" && ",
											"        err.rejectedValue === \"null\" && err.description === \"Teacher's phone number cannot be null\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Teacher\",\n    \"lastname\": \"NPC\",\n    \"address\": \"Address\",\n    \"age\": 50,\n    \"phone\": null,\n    \"email\": \"profe@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "empty phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create teacher with empty phone', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"teacherDTO.phone\" && ",
											"        err.rejectedValue === \"\" && err.description === \"Teacher's phone number cannot be blank\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Teacher\",\n    \"lastname\": \"NPC\",\n    \"address\": \"Address\",\n    \"age\": 40,\n    \"phone\": \"\",\n    \"email\": \"profe@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create teacher with wrong phone number', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"teacherDTO.phone\" && ",
											"        err.rejectedValue === \"HELLO57831241\" && err.description === \"Teacher's phone must have the correct format\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Teacher\",\n    \"lastname\": \"NPC\",\n    \"address\": \"Address\",\n    \"age\": 40,\n    \"phone\": \"HELLO57831241\",\n    \"email\": \"profe@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid phone 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create teacher with wrong phone number', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"teacherDTO.phone\" && ",
											"        err.rejectedValue === \"myohonenumber\" && err.description === \"Teacher's phone must have the correct format\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Teacher\",\n    \"lastname\": \"NPC\",\n    \"address\": \"Address\",\n    \"age\": 40,\n    \"phone\": \"myohonenumber\",\n    \"email\": \"profe@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid phone 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create teacher with wrong phone number', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"teacherDTO.phone\" && ",
											"        err.rejectedValue === \"479832174831284723894732482347239487238432\" && err.description === \"Teacher's phone must have the correct format\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Teacher\",\n    \"lastname\": \"NPC\",\n    \"address\": \"Address\",\n    \"age\": 40,\n    \"phone\": \"479832174831284723894732482347239487238432\",\n    \"email\": \"profe@email.com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "empty email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create teacher with empty email', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"teacherDTO.email\" && ",
											"        err.rejectedValue === \"\" && err.description === \"Teacher's email cannot be blank\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Teacher\",\n    \"lastname\": \"NPC\",\n    \"address\": \"Address\",\n    \"age\": 40,\n    \"phone\": \"471983217\",\n    \"email\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "null email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create teacher with null email', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"teacherDTO.email\" && ",
											"        err.rejectedValue === \"null\" && err.description === \"Teacher's email cannot be null\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Teacher\",\n    \"lastname\": \"NPC\",\n    \"address\": \"Address\",\n    \"age\": 40,\n    \"phone\": \"471983217\",\n    \"email\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid email 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create teacher with wrong email', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"teacherDTO.email\" && ",
											"        err.rejectedValue === \"email dot com\" && err.description === \"Teacher's email must have the correct format: {user}@{domain}.{tld}\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Teacher\",\n    \"lastname\": \"NPC\",\n    \"address\": \"Address\",\n    \"age\": 40,\n    \"phone\": \"471983217\",\n    \"email\": \"email dot com\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid email 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create teacher with wrong email', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"teacherDTO.email\" && ",
											"        err.rejectedValue === \"pacoemail.com@\" && err.description === \"Teacher's email must have the correct format: {user}@{domain}.{tld}\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Teacher\",\n    \"lastname\": \"NPC\",\n    \"address\": \"Address\",\n    \"age\": 40,\n    \"phone\": \"471983217\",\n    \"email\": \"pacoemail.com@\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid email 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create teacher with wrong email', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"teacherDTO.email\" && ",
											"        err.rejectedValue === \"paco.perez@emailcom\" && err.description === \"Teacher's email must have the correct format: {user}@{domain}.{tld}\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Teacher\",\n    \"lastname\": \"NPC\",\n    \"address\": \"Address\",\n    \"age\": 40,\n    \"phone\": \"471983217\",\n    \"email\": \"paco.perez@emailcom\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/teachers",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"teachers"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "check created models",
			"item": [
				{
					"name": "Get All Courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get all courses HTTP Status', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Get all courses verify body', () => {",
									"    const res = pm.response.json();",
									"    const body = res.body;",
									"    pm.expect(body).to.be.an(\"array\");",
									"    pm.expect(body).to.be.empty;",
									"    pm.expect(res.timestamp).to.be.not.empty;",
									"    pm.expect(res.uri).to.be.eq(\"/api/v1/courses\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/courses",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Schools",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get all schools', () => {",
									"    pm.response.to.have.status(200);",
									"    const res = pm.response.json();",
									"    const body = res.body;",
									"    pm.expect(body).to.be.an(\"array\");",
									"    pm.expect(body).to.be.empty;",
									"    pm.expect(res.timestamp).to.be.not.empty;",
									"    pm.expect(res.uri).to.be.eq(\"/api/v1/schools\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/schools",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"schools"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Students",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get all students HTTP Status', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Get all students verify body', () => {",
									"    const res = pm.response.json();",
									"    const body = res.body;",
									"    pm.expect(body).to.be.an(\"array\");",
									"    pm.expect(body).to.be.empty;",
									"    pm.expect(res.timestamp).to.be.not.empty;",
									"    pm.expect(res.uri).to.be.eq(\"/api/v1/students\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/students",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"students"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Teachers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get all teachers HTTP Status', () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Get all teachers verify body', () => {",
									"    const res = pm.response.json();",
									"    const body = res.body;",
									"    pm.expect(body).to.be.an(\"array\");",
									"    pm.expect(body).to.be.empty;",
									"    pm.expect(res.timestamp).to.be.not.empty;",
									"    pm.expect(res.uri).to.be.eq(\"/api/v1/teachers\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/teachers",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"teachers"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}