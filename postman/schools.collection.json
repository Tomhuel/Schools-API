{
	"info": {
		"_postman_id": "746105ef-6d4e-414c-a610-603cd7ce6049",
		"name": "Schools",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26242746"
	},
	"item": [
		{
			"name": "Invalid Requests",
			"item": [
				{
					"name": "name",
					"item": [
						{
							"name": "trim spaces in name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create school with spaces around name', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/schools\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"schoolDetailDTO.name\" && ",
											"        err.rejectedValue === \"              SCHOOL         \" && err.description === \"School's name cannot contain any space character at the start or end of the string\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"              SCHOOL         \",\n    \"startDate\": \"2001-09-11T00:00:00Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/schools",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"schools"
									]
								}
							},
							"response": []
						},
						{
							"name": "numbers in name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create school with numbers in name', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/schools\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"schoolDetailDTO.name\" && ",
											"        err.rejectedValue === \"12387Course983420\" && err.description === \"School's name cannot contain any number\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"12387Course983420\",\n    \"startDate\": \"2001-09-11T00:00:00Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/schools",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"schools"
									]
								}
							},
							"response": []
						},
						{
							"name": "special chars in name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create school with special chars in name', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/schools\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"schoolDetailDTO.name\" && ",
											"        err.rejectedValue === \"$$school$$\" && err.description === \"School's name cannot contain any special characters\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"$$school$$\",\n    \"startDate\": \"2001-09-11T00:00:00Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/schools",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"schools"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "startDate",
					"item": [
						{
							"name": "null startDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create school with null start date', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/schools\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"schoolDetailDTO.startDate\" && ",
											"        err.rejectedValue === \"null\" && err.description === \"School's start date cannot be null\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Colegio Monjas REPO\",\n    \"startDate\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/schools",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"schools"
									]
								}
							},
							"response": []
						},
						{
							"name": "future startDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create school with a future start date from now', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/schools\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"schoolDetailDTO.startDate\" && ",
											"        err.rejectedValue === \"Thu Sep 11 01:00:00 BST 3000\" && err.description === \"School's start date cannot be from the future\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Colegio Monjas REPO\",\n    \"startDate\": \"3000-09-11T00:00:00Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/schools",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"schools"
									]
								}
							},
							"response": []
						},
						{
							"name": "over 200yo old startDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Create school with start date over 200yo', () => {",
											"    pm.response.to.have.status(400);",
											"    const res = pm.response.json();",
											"    pm.expect(res.errors).to.be.an(\"array\").that.is.not.empty;",
											"    pm.expect(res.uri).to.be.eq(\"/api/v1/schools\");",
											"",
											"    const hasExpectedError = res.errors.some(err => {",
											"        return err.causedBy === \"schoolDetailDTO.startDate\" && ",
											"        err.rejectedValue === \"Wed Sep 11 00:00:00 GMT 1000\" && err.description === \"School's start date cannot be earlier from 200 years ago\";",
											"    });",
											"",
											"    pm.expect(hasExpectedError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Colegio Monjas REPO\",\n    \"startDate\": \"1000-09-11T00:00:00Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/api/v1/schools",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"api",
										"v1",
										"schools"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Valid Requests",
			"item": [
				{
					"name": "Get All Schools",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get all schools', () => {",
									"    pm.response.to.have.status(200);",
									"    const res = pm.response.json();",
									"    const body = res.body;",
									"    pm.expect(body).to.be.an(\"array\");",
									"    pm.expect(body).to.be.empty;",
									"    pm.expect(res.timestamp).to.be.not.empty;",
									"    pm.expect(res.uri).to.be.eq(\"/api/v1/schools\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/schools",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"schools"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Schools",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Create school', () => {",
									"    pm.response.to.have.status(201);",
									"    const res = pm.response.json();",
									"    const body = res.body;",
									"    pm.environment.set('SCHOOL_ID', body.id);",
									"    pm.expect(body).to.deep.include(",
									"        {",
									"            \"id\": body.id,",
									"            \"name\": \"Colegio Santa María\",",
									"            \"startDate\": \"2001-09-11T00:00:00.000+00:00\",",
									"            \"courses\": []",
									"        }",
									"    );",
									"",
									"    pm.expect(res.timestamp).to.be.not.empty;",
									"    pm.expect(res.uri).to.be.eq(\"/api/v1/schools\");",
									"",
									"    const location = pm.response.headers.get('Location');",
									"    pm.expect(location).to.include('/api/v1/schools/');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Colegio Santa María\",\n    \"startDate\": \"2001-09-11T00:00:00Z\",\n    \"courses\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/schools",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"schools"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Schools AFTER CREATION",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get all schools', () => {",
									"    pm.response.to.have.status(200);",
									"    const res = pm.response.json();",
									"    const body = res.body;",
									"    pm.expect(body).to.be.an(\"array\");",
									"    pm.expect(body).to.have.length(1);",
									"    pm.expect(res.timestamp).to.be.not.empty;",
									"    pm.expect(res.uri).to.be.eq(\"/api/v1/schools\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/schools",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"schools"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get School",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get single school', () => {",
									"    pm.response.to.have.status(200);",
									"    const res = pm.response.json();",
									"    const body = res.body;",
									"    pm.expect(body).to.deep.include(",
									"        {",
									"            \"id\": pm.environment.get('SCHOOL_ID'),",
									"            \"name\": \"Colegio Santa María\",",
									"            \"startDate\": \"2001-09-11T00:00:00.000+00:00\",",
									"            \"courses\": []",
									"        }",
									"    );",
									"    pm.expect(res.timestamp).to.be.not.empty;",
									"    pm.expect(res.uri).to.be.eq(`/api/v1/schools/${pm.environment.get('SCHOOL_ID')}`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/schools/:id",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"schools",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{SCHOOL_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Schools",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Update school', () => {",
									"    pm.response.to.have.status(200);",
									"    const res = pm.response.json();",
									"    const body = res.body;",
									"    pm.expect(body).to.deep.include(",
									"        {",
									"            \"id\": body.id,",
									"            \"name\": \"Colegio San José del Castillo Negro Explotador\",",
									"            \"startDate\": \"2003-06-23T12:00:00.000+00:00\",",
									"            \"courses\": []",
									"        }",
									"    );",
									"    pm.expect(res.timestamp).to.be.not.empty;",
									"    pm.expect(res.uri).to.be.eq(`/api/v1/schools/${pm.environment.get('SCHOOL_ID')}`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Colegio San José del Castillo Negro Explotador\",\n    \"startDate\": \"2003-06-23T12:00:00Z\",\n    \"courses\": []\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/api/v1/schools/:id",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"schools",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{SCHOOL_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get School Updated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get single school after update', () => {",
									"    pm.response.to.have.status(200);",
									"    const res = pm.response.json();",
									"    const body = res.body;",
									"    pm.expect(body).to.deep.include(",
									"        {",
									"            \"id\": pm.environment.get('SCHOOL_ID'),",
									"            \"name\": \"Colegio San José del Castillo Negro Explotador\",",
									"            \"startDate\": \"2003-06-23T12:00:00.000+00:00\",",
									"            \"courses\": []",
									"        }",
									"    );",
									"    pm.expect(res.timestamp).to.be.not.empty;",
									"    pm.expect(res.uri).to.be.eq(`/api/v1/schools/${pm.environment.get('SCHOOL_ID')}`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/schools/:id",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"schools",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{SCHOOL_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE SCHOOL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Delete school', () => {",
									"    pm.response.to.have.status(200);",
									"    const res = pm.response.json();",
									"    pm.expect(res.timestamp).to.be.not.empty;",
									"    pm.expect(res.uri).to.be.eq(`/api/v1/schools/${pm.environment.get('SCHOOL_ID')}`);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/schools/:id",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"schools",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{SCHOOL_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get School DELETED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get single school after delete', () => {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/schools/:id",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"schools",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{SCHOOL_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Schools AFTER DELETE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get all schools after delete', () => {",
									"    pm.response.to.have.status(200);",
									"    const res = pm.response.json();",
									"    const body = res.body;",
									"    pm.expect(body).to.be.an(\"array\");",
									"    pm.expect(body).to.be.empty;",
									"    pm.expect(res.timestamp).to.be.not.empty;",
									"    pm.expect(res.uri).to.be.eq(\"/api/v1/schools\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/api/v1/schools",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"api",
								"v1",
								"schools"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get All Schools",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Get all schools', () => {",
							"    pm.response.to.have.status(200);",
							"    const res = pm.response.json();",
							"    const body = res.body;",
							"    pm.expect(body).to.be.an(\"array\");",
							"    pm.expect(body).to.be.empty;",
							"    pm.expect(res.timestamp).to.be.not.empty;",
							"    pm.expect(res.uri).to.be.eq(\"/api/v1/schools\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/v1/schools",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"v1",
						"schools"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "username",
				"value": "John",
				"type": "string"
			},
			{
				"key": "password",
				"value": "Doe123",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}